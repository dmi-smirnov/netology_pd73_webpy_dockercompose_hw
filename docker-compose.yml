# Cделать конфигурацию docker-compose любого Вашего проекта из
# курса по Django, который использует БД (например, CRUD: Склады и запасы).
# Результатом является docker-compose.yml файл с описанием конфигурации для
# развертывания приложения (и не забудьте про Dockerfile).
# P.S. для создания конфигурации необходим образ своего проекта,
# а значит предварительно необходимо описать Dockerfile, сделать образ и
# потом уже писать docker-compose.yml (это типичный сценарий при работе с
# Docker и Docker Compose).
# Созданные файлы отправьте в личном кабинете на сайте netology.ru
# Подсказка:
# Конфигурация должна состоять из 3-х контейнеров: backend, postgres, nginx.
# Контейнеры объединяются в сеть, которые работают в связке:
# Nginx работает в качестве proxy-http для пересылки динамических запросов к
# Django или возвращая статические html файлы.
# PostgreSQL запускается до Django.
# Django запускается через Gunicorn.

volumes:
  pgdata:
  django_static:

networks:
  net:

services:
  dbms:
    image: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
    networks:
      - net
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PWD}
      - POSTGRES_DB=${DB_NAME}
      
  gunicorn_django:
    image: django_crud
    volumes:
      - django_static:${DJANGO_STATIC_ROOT}:rw
    networks:
      - net
    environment:
      - DEBUG=${DJANGO_DEBUG}
      - DATABASE_ENGINE=${DJANGO_DATABASE_ENGINE}
      - DATABASE_HOST=dbms
      - DATABASE_PORT=${DB_PORT}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PWD}
      - DATABASE_NAME=${DB_NAME}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - STATIC_ROOT=${DJANGO_STATIC_ROOT}
    depends_on:
      - dbms

  nginx:
    image: nginx
    volumes:
      - ./nginx_templates:/etc/nginx/templates:ro
      - django_static:${DJANGO_STATIC_ROOT}:ro
    networks:
      - net
    ports:
      - ${HTTP_SRV_ADDR_PORT}:80
    environment:
      - NGINX_STATIC_ROOT=${NGINX_STATIC_ROOT}
    depends_on:
      - gunicorn_django
    